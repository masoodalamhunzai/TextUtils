{"version":3,"sources":["components/TextForm/index.js","components/NavBar/index.js","components/Alert/index.js","containers/TextUtilApp/index.js","App.js","reportWebVitals.js","index.js"],"names":["TextForm","props","isEnableMood","useState","text","setText","totalWords","setTotalWords","useEffect","countWordArr","split","map","word","push","length","className","id","value","onChange","e","target","rows","type","onClick","newText","toUpperCase","toLowerCase","charAt","slice","join","trimText","navigator","clipboard","writeText","NavBar","toggleMood","aria-current","href","htmlFor","Alert","showAlert","setShowAlert","alertMessage","message","role","data-bs-dismiss","aria-label","TextUtilApp","setEnableMood","setAlertMessage","setTimeout","document","body","style","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1bfb22d6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst TextForm = (props) => {\r\n  const { isEnableMood } = props;\r\n\r\n  let [text, setText] = useState(\"\");\r\n  let [totalWords, setTotalWords] = useState(null);\r\n\r\n  const handleOnChange = (e) => {\r\n    let value = e.target.value;\r\n    setText(value);\r\n  };\r\n  const handleUpperCase = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n  const handleLowerCase = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n  const handleCaptalize = () => {\r\n    let newText = text\r\n      .toLowerCase()\r\n      .split(\" \")\r\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1));\r\n    setText(newText.join(\" \"));\r\n  };\r\n  const handleRemoveSpaces = () => {\r\n    let trimText = text.split(/[ ]+/);\r\n    setText(trimText.join(\" \"));\r\n  };\r\n  const handleCopyText = () => {\r\n    navigator.clipboard.writeText(text);\r\n  };\r\n  useEffect(() => {\r\n    const countWordArr = [];\r\n    text.split(\" \").map((word) => word !== \"\" && countWordArr.push(word));\r\n    setTotalWords(countWordArr.length);\r\n  }, [text]);\r\n\r\n  const handleClear = () => {\r\n    setText(\"\");\r\n  };\r\n  return (\r\n    <div className=\"mx-auto\">\r\n      <h2\r\n        className={(isEnableMood ? \"text-white\" : \"text-dark\") + \" text-center\"}\r\n      >\r\n        Try TextUtils - word counter, character counter, remove extra spaces\r\n      </h2>\r\n      <div className=\"my-3\">\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"exampleFormControlTextarea1\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          rows=\"8\"\r\n        ></textarea>\r\n        <div className=\"col-auto my-4\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary mx-1\"\r\n            onClick={handleUpperCase}\r\n          >\r\n            Convert to UpperCase\r\n          </button>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary mx-1\"\r\n            onClick={handleLowerCase}\r\n          >\r\n            Convert to LowerCase\r\n          </button>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary mx-1\"\r\n            onClick={handleCaptalize}\r\n          >\r\n            First Letter Captalize\r\n          </button>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary mx-1\"\r\n            onClick={handleRemoveSpaces}\r\n          >\r\n            Remove Extra Spaces\r\n          </button>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary mx-1\"\r\n            onClick={handleCopyText}\r\n          >\r\n            Copy Text\r\n          </button>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary mx-1\"\r\n            onClick={handleClear}\r\n          >\r\n            Clear Text\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className={isEnableMood ? \"text-white\" : \"text-dark\"}>\r\n        <h4> Text Output </h4>\r\n        <p>\r\n          Preview:\r\n          <span className=\"fw-bold\"> {text.length > 0 ? text : 0} </span>\r\n        </p>\r\n        <p>\r\n          Character Count :\r\n          <span className=\"fw-bold\"> {text.split(\" \").join(\"\").length}</span>\r\n        </p>\r\n        <p>\r\n          Word Count :\r\n          <span className=\"fw-bold\"> {totalWords ? totalWords : 0} </span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default TextForm;\r\n","import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nconst NavBar = (props) => {\r\n  const { isEnableMood, toggleMood } = props;\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-light px-5  ${\r\n        isEnableMood ? \"bg-dark text-white \" : \"bg-light\"\r\n      } `}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav  mb-2 mb-lg-0 w-100 align-items-center d-flex justify-content-between\">\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className={`nav-link active ${\r\n                  isEnableMood ? \"text-white \" : \"text-dark\"\r\n                }  `}\r\n                aria-current=\"page\"\r\n                href=\"/\"\r\n              >\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <div className=\"form-check form-switch\">\r\n                <input\r\n                  className=\"form-check-input\"\r\n                  type=\"checkbox\"\r\n                  id=\"flexSwitchCheckChecked\"\r\n                  onClick={toggleMood}\r\n                />\r\n                <label\r\n                  className=\"form-check-label\"\r\n                  htmlFor=\"flexSwitchCheckChecked\"\r\n                >\r\n                  Enable {isEnableMood ? \"Dark\" : \"Light\"} mood\r\n                </label>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\nexport default NavBar;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Alert = (props) => {\r\n  let [showAlert, setShowAlert] = useState(true);\r\n  const handleAlert = () => {\r\n    setShowAlert(false);\r\n  };\r\n  const { message, type } = props.alertMessage ? props.alertMessage : \"\";\r\n  return (\r\n    showAlert && (\r\n      <div\r\n        className={`alert alert-${type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>Hey</strong> {message}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n          onClick={handleAlert}\r\n        ></button>\r\n      </div>\r\n    )\r\n  );\r\n};\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\r\nimport TextForm from \"../../components/TextForm\";\r\nimport NavBar from \"../../components/NavBar\";\r\nimport Alert from \"../../components/Alert\";\r\n// import { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nconst TextUtilApp = () => {\r\n  const [isEnableMood, setEnableMood] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState(null);\r\n\r\n  const toggleMood = () => {\r\n    setEnableMood(!isEnableMood);\r\n    if (isEnableMood) {\r\n      document.body.style.backgroundColor = \"#fff\";\r\n      showAlert(\" You should enable Light mood\", \"success\");\r\n    } else {\r\n      document.body.style.backgroundColor = \"rgb(12 12 13)\";\r\n      showAlert(\" You should enable dark mood\", \"success\");\r\n    }\r\n  };\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlertMessage({ message, type });\r\n    setTimeout(() => {\r\n      setAlertMessage(null);\r\n    }, 2000);\r\n  };\r\n\r\n  return (\r\n    // <Router>\r\n    <>\r\n      <NavBar toggleMood={toggleMood} isEnableMood={isEnableMood} />\r\n      {alertMessage && <Alert alertMessage={alertMessage} />}\r\n      <div className=\"container my-5\">\r\n        <TextForm isEnableMood={isEnableMood} />\r\n      </div>\r\n    </>\r\n    // </Router>\r\n  );\r\n};\r\nexport default TextUtilApp;\r\n","import TextUtilApp from \"./containers/TextUtilApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TextUtilApp />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}